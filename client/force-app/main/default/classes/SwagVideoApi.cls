/*
 * videoapi
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagVideoApi {
    SwagClient client;

    public SwagVideoApi(SwagClient client) {
        this.client = client;
    }

    public SwagVideoApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Convert Video to Animated GIF format.
     * Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video\&#39;s aspect ratio.
     * @param inputFile Input file to perform the operation on. (required)
     * @param fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param maxWidth Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param maxHeight Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)
     * @param preserveAspectRatio Optional; If false, the original video\&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param frameRate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)
     * @param extendProcessingTime Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @param startTime Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)
     * @param timeSpan Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob videoConvertToGif(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/video/convert/to/gif', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'fileUrl' => (String) params.get('fileUrl'),
                'maxWidth' => (Integer) params.get('maxWidth'),
                'maxHeight' => (Integer) params.get('maxHeight'),
                'preserveAspectRatio' => (Boolean) params.get('preserveAspectRatio'),
                'frameRate' => (Integer) params.get('frameRate'),
                'extendProcessingTime' => (Boolean) params.get('extendProcessingTime'),
                'startTime' => (Datetime) params.get('startTime'),
                'timeSpan' => (Datetime) params.get('timeSpan')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Video to MOV format.
     * Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
     * @param inputFile Input file to perform the operation on. (required)
     * @param fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param maxWidth Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param maxHeight Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param preserveAspectRatio Optional; If false, the original video\&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param frameRate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param extendProcessingTime Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob videoConvertToMov(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/video/convert/to/mov', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'fileUrl' => (String) params.get('fileUrl'),
                'maxWidth' => (Integer) params.get('maxWidth'),
                'maxHeight' => (Integer) params.get('maxHeight'),
                'preserveAspectRatio' => (Boolean) params.get('preserveAspectRatio'),
                'frameRate' => (Integer) params.get('frameRate'),
                'quality' => (Integer) params.get('quality'),
                'extendProcessingTime' => (Boolean) params.get('extendProcessingTime')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Video to MP4 format.
     * Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
     * @param inputFile Input file to perform the operation on. (required)
     * @param fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param maxWidth Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param maxHeight Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param preserveAspectRatio Optional; If false, the original video\&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param frameRate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param extendProcessingTime Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob videoConvertToMp4(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/video/convert/to/mp4', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'fileUrl' => (String) params.get('fileUrl'),
                'maxWidth' => (Integer) params.get('maxWidth'),
                'maxHeight' => (Integer) params.get('maxHeight'),
                'preserveAspectRatio' => (Boolean) params.get('preserveAspectRatio'),
                'frameRate' => (Integer) params.get('frameRate'),
                'quality' => (Integer) params.get('quality'),
                'extendProcessingTime' => (Boolean) params.get('extendProcessingTime')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Convert Video to WEBM format.
     * Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
     * @param inputFile Input file to perform the operation on. (required)
     * @param fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @param maxWidth Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)
     * @param maxHeight Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)
     * @param preserveAspectRatio Optional; If false, the original video\&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)
     * @param frameRate Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)
     * @param quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)
     * @param extendProcessingTime Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob videoConvertToWebm(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/video/convert/to/webm', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'fileUrl' => (String) params.get('fileUrl'),
                'maxWidth' => (Integer) params.get('maxWidth'),
                'maxHeight' => (Integer) params.get('maxHeight'),
                'preserveAspectRatio' => (Boolean) params.get('preserveAspectRatio'),
                'frameRate' => (Integer) params.get('frameRate'),
                'quality' => (Integer) params.get('quality'),
                'extendProcessingTime' => (Boolean) params.get('extendProcessingTime')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
    /**
     * Get detailed information about a video or audio file
     * Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
     * @param inputFile Input file to perform the operation on. (required)
     * @param fileUrl Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)
     * @return Blob
     * @throws Swagger.ApiException if fails to make API call
     */
    public Blob videoGetInfo(Map<String, Object> params) {
        client.assertNotNull(params.get('inputFile'), 'inputFile');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('inputFile', (Blob) params.get('inputFile')));

        return (Blob) client.invoke(
            'POST', '/video/convert/get-info', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'fileUrl' => (String) params.get('fileUrl')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'Apikey' },
            Blob.class
        );
    }
}
